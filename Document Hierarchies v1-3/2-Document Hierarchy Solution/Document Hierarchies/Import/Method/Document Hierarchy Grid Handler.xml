<AML>
 <Item type="Method" id="0C2D6537355C46DF80AAFF91BBF1017A" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Client side Method: treeGrid1 Handler
// 
// load with --> onLoad Event on Form:
//
// the variable treeGrid1_Control is defined globally in separate HTML code on form field
// the variable toolbar1_Control is defined globally in separate HTML code on form field
//
//  ---- history -----
//  RL  02.05.2012          initial version - cloned grid from ML CAD Struct Handler
//
// ====================================================================================================================
if (OnLoadMethodsLoaded) {return;}
var isStartedFromTab = (top.relationships && typeof(top.relationships) !== undefined);
var result;

// other global variables
var thisItem,thisItemType,thisItemId,thisItemGeneration;
var thisStructRelType;
var columnProperties,columnWidths,columnAlign,columnDisplayTypes;
var itemSelectProperties,relSelectProperties;
var columnPropertiesRelatedDocs,columnDisplayTypesRelatedDocs,itemSelectPropertiesRelatedDocs;
var hierarchyNodeIconOpened,hierarchyNodeIconClosed;
var relatedDocIconProperty;
var showRootItem;
var gridRowHeight=20;
var clickedGridLinkValue;
var treeGrid1;
var mainFormItemTypeName;
var GridXMLHeader = '';
var queryOption = "";
var isEnableQueryOption;
var docCollectionItemType="";
var docCollectionItemId="";
var docCollectionItem;

//--------------
initGlobalVariables = function ()
{
  //debugger;
  relatedDocIconProperty = "published_file_type_icon";
  itemSelectProperties = "short_name,name,description,state,locked_by_id,classification,major_rev,modified_on,owned_by_id";
  itemSelectPropertiesRelatedDocs = "item_number,name,description,state,generation,locked_by_id,classification,owned_by_id,major_rev,minor_rev,release_date,has_change_pending,has_change_icon,has_files,has_files_icon,"+relatedDocIconProperty;
  relSelectProperties = "sort_order";

  //-----------  
  if (isStartedFromTab) 
  {
    showRootItem = false;
    thisItem = top.frames[1].document.thisItem;
    thisItemType = thisItem.getAttribute("type","");
    thisItemId = thisItem.getAttribute("id","");    
    
    columnWidths = "280,40,40,40,200,40,40,80,60,60,80,150,80,250";
    columnAlign  = "l,r,c,c,l,c,c,c,c,c,l,l,l,l";

    // for hierarchy node rows - tree++ means the corresponding column property defines 2 properties to concatenate
    columnProperties = "item.short_name+name,<empty>,item.locked_by_id,<empty>,<empty>,item.major_rev,<empty>,item.state,<empty>,<empty>,<empty>,item.owned_by_id,<empty>,item.description";
    columnDisplayTypes = "tree++,text:#--#,lock,text:#--#,text:#--#,text,text:#--#,text:bg_color,check,check,text:#--#,item(keyed_name),text:#--#,text";

    // for document rows
    columnPropertiesRelatedDocs = "item.item_number,rel.sort_order,item.locked_by_id,item."+relatedDocIconProperty+",item.name,item.major_rev,item.generation,item.state,item.has_files,item.has_change_pending,item.release_date,item.owned_by_id,item.classification,item.description";
    columnDisplayTypesRelatedDocs = "tree:as_link,text,lock,image,text,text,text,text:bg_color,check,check,date,item(keyed_name),text,text";
  }
  else
  {
    showRootItem = true;
    queryOption = "latest_released";
    itemTypeName = mainFormItemTypeName;
    
    //assumes a variable with name "DCTOCIT_" followed by "itemTypeName"
    // DCTOCIT = Document Collection TOC Item Type
    var DCLvariableItem = innovator.newItem("Variable","get");
    DCLvariableItem.setProperty("name","DCTOCIT_"+itemTypeName);
    DCLvariableItem = DCLvariableItem.apply();
    if (DCLvariableItem.isError()) {alert("Variable '"+"DCTOCIT_"+itemTypeName+"' not defined !");return;}
    
    // now get the "current" header item connector to this TOC item
    thisItemType = "Document Collection";
    var docCollectionItemNumber = DCLvariableItem.getProperty("value","invalid");
    thisItem = fn_getLatestReleasedItemOfItemNumber(thisItemType,docCollectionItemNumber);
    if (thisItem.isError()) {top.aras.AlertError(thisItem.getErrorString());return;}
   
    //update missing context
    document.thisItem = thisItem;
    I18Ncntx = innovator.getI18NSessionContext();

    columnWidths = "280,40,40,200,40,40,80,150,80,250";
    columnAlign  = "l,r,c,l,c,c,l,l,l,l";

    // for hierarchy node rows - tree++ means the corresponding column property defines 2 properties to concatenate
    columnProperties = "item.short_name+name,<empty>,<empty>,<empty>,item.major_rev,<empty>,<empty>,item.owned_by_id,<empty>,item.description";
    columnDisplayTypes = "tree++,text:#--#,text:#--#,text:#--#,text,text:#--#,text:#--#,item(keyed_name),text:#--#,text";

    // for document rows
    columnPropertiesRelatedDocs = "item.item_number,rel.sort_order,item."+relatedDocIconProperty+",item.name,item.major_rev,item.generation,item.release_date,item.owned_by_id,item.classification,item.description";
    columnDisplayTypesRelatedDocs = "tree:as_link,text,image,text,text,text,date,item(keyed_name),text,text";
  }
  
  thisItemId = thisItem.getAttribute("id","");
  thisStructRelType = "Document Hierarchy";
    
  treeGrid1 = new DocumentHierarchyGrid;
  return true;
};

// ========= MAIN - callbacks for HTML skeleton in HTML field on the Form ========
// -- callback to populate grid --
window.RefreshGrid = function(doInit,item, itemTypeName)
{
  if (itemTypeName !== undefined) { mainFormItemTypeName = itemTypeName;}
  if(doInit === undefined) {doInit = true;}
  if(item !== undefined) {thisItem = item;}

  if (!initGlobalVariables()){return;}
  
//  if(!treeGrid1.Initialized)
  if(doInit)
  {
	treeGrid1.Initialize();
  }
  
  fn_setTbControlEnabled("refresh_all", false);
  try
  {
    treeGrid1.Draw(true);
  }
  finally
  {
    fn_setTbControlEnabled("refresh_all", true);
  }
  fn_initToolbar(doInit);
  //treeGrid1_Control.SetColumnProperties("sorttype=numeric",2);
  //treeGrid1_Control.sort(2,true);
  //treeGrid1_Control.CollapseAll();
};

// -- callback to initialize toolbar --
window.loadGridToolbarHTML = function(itemTypeName)
{
  if (itemTypeName !== undefined) {mainFormItemTypeName = itemTypeName;}
  var toolbarHTMLstring = '';
  toolbarHTMLstring += '<toolbarapplet on_click="toolbar1_onToolbarClick" ';  
  toolbarHTMLstring += 'on_load="toobarStart" buttonstyle="windows"  buttonsize="40,22" font="' + "Arial-10" + '" ';
  toolbarHTMLstring += 'top_border="1"  bottom_border="1"><toolbar id="toolbar"> ';
  toolbarHTMLstring += '<button text="Expand All" id="expandall" image="icons/24x24expandpopnode.gif" tooltip="Expand All" disabled="false" /> ';
  toolbarHTMLstring += '<button text="Collapse All" id="collapseall" image="icons/24x24collandpopnode.gif" tooltip="Collapse All" disabled="false" /> ';
  toolbarHTMLstring += '<button text="Refresh" id="refresh_all" image="icons/20x20refresh.gif" tooltip="Refresh Structure" disabled="false" /> ';
  toolbarHTMLstring += '<separator/> ';
  toolbarHTMLstring += '<choice disabled="true" id="query_option" tooltip="Query Options" statusmsg="Query Options" >';
  toolbarHTMLstring += ' <choiceitem id="latest_released" >Latest Released</choiceitem>';
  toolbarHTMLstring += ' <choiceitem id="current_config" >This Revision</choiceitem>';
  toolbarHTMLstring += '</choice>';
  toolbarHTMLstring += '<separator/> ';
  toolbarHTMLstring += '<button text="View Item" id="open_row_item" image="icons/20x20view.gif" tooltip="View Item" disabled="false" /> ';
  toolbarHTMLstring += '</toolbar></toolbarapplet>';

  toolbar1_Control.loadToolbarFromStr(toolbarHTMLstring);
  
//  toolbar1_Control.loadXML(toolbarHTMLstring);
  return;
};

//==================== Grid Layout & Style ===================================
DocumentHierarchyGrid = function DocumentHierarchyGridFunc()
{
	this.itemType = thisItemType;
};
var standardGridFont= "Microsoft Sans Serif-8";
var italicGridFont= "Microsoft Sans Serif-italic-8";

//------- Initialize the layout of the Grid
DocumentHierarchyGrid.prototype.Initialize = function DocumentHierarchyGrid_Initialize()
{
 //debugger;
  GridXMLHeader = '';
  GridXMLHeader += '<?xml version="1.0"?><table font="' + standardGridFont + '" ';
  GridXMLHeader += 'backgroundColor="white" ';
  GridXMLHeader += 'sel_bgColor="steelbue" '; // html predefined
  GridXMLHeader += 'sel_TextColor="white" ';
  GridXMLHeader += 'header_BgColor="buttonface" ';
  GridXMLHeader += 'delim ="|" ';
  //GridXMLHeader += 'zebra="true" ';
  GridXMLHeader += 'editable="false" ';
  GridXMLHeader += 'draw_grid="true" ';
  GridXMLHeader += 'multiselect="false" ';
  GridXMLHeader += 'enableHtml="false" ';
  GridXMLHeader += 'enterAsTab="false" ';
  GridXMLHeader += 'bgInvert="true" ';    
  GridXMLHeader += 'expandroot="true" ';
  GridXMLHeader += 'expandall="false" ';
  GridXMLHeader += 'treelines="1" ';
  GridXMLHeader += 'locale="enUS" ';
  GridXMLHeader += 'onrowselect="treeGrid1_onGridClick" ';
  GridXMLHeader += 'onDoubleClick="treeGrid1_onGridDoubleClick" ';

  GridXMLHeader += '  column_draggable="true" ';
//  GridXMLHeader += '  xmlns:msxsl="urn:schemas-microsoft-com:xslt" ';
//  GridXMLHeader += '  xmlns:aras="http://www.aras.com" ';
//  GridXMLHeader += '  xmlns:usr="urn:the-xml-files:xslt" >';

  GridXMLHeader += '> ';
  // column headings
  GridXMLHeader += '<thead>';
  GridXMLHeader += fn_GenerateTableHeadingsXML ("Document",thisStructRelType,columnPropertiesRelatedDocs);
  GridXMLHeader += '</thead>';

  GridXMLHeader += '<columns>';
  GridXMLHeader += fn_GenerateTableColumnsXML (columnWidths,columnAlign);
  GridXMLHeader += '</columns>';
  
  GridXMLHeader += '<menu>';
  GridXMLHeader += '<emptytag/>';
  GridXMLHeader += '</menu>';
  GridXMLHeader += '</table>';


  this.Initialized = true;
};

//------- function passed to functions of Common Grid Handler
//--------------
top.fn_addRelatedItemsToThisNodeLevel = function(gridCtrl, parent_row_id, sourceItemId)  {
  fn_addHierarchyNodeRelatedDocsToRow(gridCtrl, parent_row_id, sourceItemId);
};

//------- populate the Grid
DocumentHierarchyGrid.prototype.Draw = function DocumentHierarchyGrid_Draw(forceGetRelationships)
{
  //debugger;
  treeGrid1_Control.clear();treeGrid1_Control.focus();
  treeGrid1_Control.InitXml(GridXMLHeader);	

  top.fn_addRelatedItemsToThisNodeLevel = fn_addHierarchyNodeRelatedDocsToRow;
 
  //===== to display a hierarchy/structure call function "MultiLevelItems Functions" (Common Utitlities) with:
  
  //   rootItemId        = item id of root item or tree structure (i.e. a part assembly)
  //   itemType          = name of the item type of the node elements of the tree (i.e. "Part", "CAD_Document")
  //   showWithRootItem  = true or false. true = the root item will be displayed as top level in the tree grid
  //   itemProperties    = comma separated list of property names of properties of the item to fetch (i.e. "item_number,name,state" etc.)
  //   relType           = name of the item to item relationship (i.e. "Part BOM")
  //   relProperties     = comma separated list of property names of properties of the relationship to fetch (i.e. "sort_order,quantity" etc.)
  //   columnProperties  = comma separated list of property names to display in tree grid's columns (must match the tree grid layout)
  //                       coded prefixeds "item." or "rel." are used to identify whether use a property from list "itemProperties" or from "relProperties" 
  //   columnDataTypes   = comma separated list of display types for each property listed in columnProperties. first column must alway be "tree".
  //                       for other columns use "text" or "lock" or "check". 
  //                       if "lock" is used, the property must be the locked_by_id or an item - then the lock icon will be displayed
  //                       if "check" is used, the property must be a boolean or 1-character string with values "1" or "0" - then a checkbox will be displayed
  
  //==================================
  treeGrid1_MsgsId = top.aras.showStatusMessage(0, "Loading Structure of " + thisItemType + "...", '../images/Animated/ProgressSmall.gif');

  var isReleasedStructure = false;

  //debugger;
  if (queryOption == "latest_released") {isReleasedStructure=true;}

  switch (thisItemType)
  {
    case "Document Collection":
       docCollectionItemId = thisItem.getID();
       if (isReleasedStructure && isStartedFromTab )
       {
          var docCollectionItemNumber = thisItem.getProperty("item_number","");
          // get ID of latest released generation of Document Collection item
          docCollectionItem = fn_getLatestReleasedItemOfItemNumber(thisItemType,docCollectionItemNumber);
          if (docCollectionItem.isError()) {top.aras.AlertError(docCollectionItem.getErrorString());return;}
          docCollectionItemId = docCollectionItem.getID();
       }
       docCollectionItem =  thisItem;

       // get Grid Icons
       hierarchyNodeIconClosed = fn_getClosedIconFromHeadItem(docCollectionItem);
       hierarchyNodeIconOpened = fn_getOpenedIconFromHeadItem(docCollectionItem);

       // get top level Nodes of Document Collection
       var qry = "<Item type='Document Collection DocNodes' action='get' ";
       qry += "select='id,sort_order,related_id(keyed_name)' >";
       qry += "<source_id>"+ docCollectionItemId +"</source_id>";
       qry += "<related_id><Item type='Document Hierarchy Node' action='get' >";

       if (isReleasedStructure) {qry += "<is_released>1</is_released>";}

       qry += "</Item></related_id></Item>";
       
       var topNodes = innovator.newItem("","");
       topNodes.loadAML(qry);
       topNodes = topNodes.apply();

       // Display Hierarchy of each top node
       showRootItem = true;
       thisItemType = "Document Hierarchy Node";
       for (var t=0; t<topNodes.getItemCount();t++)
       {
         thisItemId = topNodes.getItemByIndex(t).getProperty("related_id","");
         fn_MultiLevelItems_LoadInitalStructureLevelsToTreeGrid ( treeGrid1_Control, thisItemId, showRootItem,
           thisItemType,itemSelectProperties,
           thisStructRelType,relSelectProperties,
            columnProperties,columnDisplayTypes,2,
            hierarchyNodeIconClosed,hierarchyNodeIconOpened,isReleasedStructure);
      }

       break;
       
    case "Document Hierarchy Node":
       // get Grid Icons
       if (docCollectionItemType === "") {
         thisItem = innovator.getItemById(thisItemType, thisItemId);
         if (!Item) {return;}  // item not in database, yet
         
         if (thisItem.isError()) {return false;} // item not saved to server
         docCollectionItemType = thisItem.getProperty("header_item_type","");
         docCollectionItemId = thisItem.getProperty("header_item_id_string","");
         if (docCollectionItemType !== ""){docCollectionItem = innovator.getItemById(docCollectionItemType, docCollectionItemId);}
       }      
       hierarchyNodeIconClosed = fn_getClosedIconFromHeadItem(docCollectionItem);
       hierarchyNodeIconOpened = fn_getOpenedIconFromHeadItem(docCollectionItem);

       // Display Hierarchy
       fn_MultiLevelItems_LoadInitalStructureLevelsToTreeGrid ( treeGrid1_Control, thisItemId, showRootItem,
          thisItemType,itemSelectProperties,
          thisStructRelType,relSelectProperties,
           columnProperties,columnDisplayTypes,2,
           hierarchyNodeIconClosed,hierarchyNodeIconOpened,isReleasedStructure);
       
       break;
  }


  //==================================

  top.aras.clearStatusMessage(treeGrid1_MsgsId);
  treeGrid1_MsgsId = top.aras.showStatusMessage(0, "Loading related Items...", '../images/Animated/ProgressSmall.gif');

  //fn_addNodeRelatedDocsToHierarchy();

  top.aras.clearStatusMessage(treeGrid1_MsgsId);

  if (treeGrid1_Control.GetRootItemsCount() === 1) {treeGrid1_Control.openItem("ROOT-"+thisItemId);}

};

//------------
fn_getLatestReleasedItemOfItemNumber = function(itemType, item_number)  {
  var amlCmd = innovator.newItem(itemType,"get");
  amlCmd.setAttribute("serverEvents","0");
  amlCmd.setAttribute("select","generation,state,name,top_hierarchy_node_id,document_hierarchy_icon,document_hierarchy_icon_open");
  amlCmd.setProperty("item_number",item_number);
  return amlCmd.apply("Get Latest Released Item By Num");  // server method from Common Utilities
};

//------------
fn_addHierarchyNodeRelatedDocsToRow = function(gridCtrl, parent_row_id, sourceItemId)  {
  var documentIcon = fn_GetSmallIconFormatOfItemType("Document");

  var qry = "<Item type='Document Hierarchy Document' action='get' ";
  qry += "select='related_id,"+ relSelectProperties + "' >";
  qry += "<source_id>"+ sourceItemId +"</source_id>";
  qry += "<related_id><Item type='Document' action='get' select='id,"+ itemSelectPropertiesRelatedDocs + ",item_type,is_released,generation'>";

  if (queryOption == "latest_released") {qry += "<is_released>1</is_released>";}

  qry += "</Item></related_id></Item>";

  var relItemRels = top.aras.newIOMItem("","");
  relItemRels.loadAML(qry);
  relItemRels = relItemRels.apply();
      
  var hierarchyNodeRelatedDocsCount = relItemRels.getItemCount();
  if (hierarchyNodeRelatedDocsCount <=0) {return 0;}

  // loop through query results
  for (var r = 0 ; r < hierarchyNodeRelatedDocsCount ; r++) {
    var relItemRel = relItemRels.getItemByIndex(r);
    var relItemId = relItemRel.getProperty("related_id","");
    var newNodeId = sourceItemId + "-" + relItemId;
    
    if (relItemId !== "") {
       var relItemType = relItemRel.getPropertyItem("related_id").getAttribute("type","");
       var relItemPublishTypeIcon;
       if (gridRowHeight > 20)
       {
         relItemPublishTypeIcon = relItemRel.getPropertyItem("related_id").getProperty("published_file_type_large_icon","");
       }
       else
       {
         relItemPublishTypeIcon = relItemRel.getPropertyItem("related_id").getProperty("published_file_type_icon","");
       }
       if (relItemId !== "") {
         //debugger;
         fn_MultiLevelItems_AddRowWithIconToGrid (gridCtrl, parent_row_id ,newNodeId,
			   columnPropertiesRelatedDocs,columnDisplayTypesRelatedDocs, documentIcon, documentIcon, relItemRel, true);

         gridCtrl.setUserData(newNodeId,"gridData_rowItemType",relItemType );
         gridCtrl.setUserData(newNodeId,"gridData_rowItemID",relItemId );
         
         var numOfCols = columnWidths.split(",").length;
         fn_SetBackgroundColorOfCellsInRow(treeGrid1_Control,parent_row_id,0,numOfCols-1, "#eeeeee");
         treeGrid1_Control.setUserData(parent_row_id,"gridData_hasHierarchyDetails","1");
       }
    }
  }
  return hierarchyNodeRelatedDocsCount;
};

//------------
fn_getClosedIconFromHeadItem = function (headItem)
{
    var defaultNodeIcon = "../images/Icons/16x16/16x16_files.gif"; // default
    if (headItem === undefined || headItem.isError()){return defaultNodeIcon;}
    var nodeIcon = headItem.getProperty("document_hierarchy_icon","");
    if (nodeIcon !== "") {return nodeIcon;}
    return defaultNodeIcon;
};

//------------
fn_getOpenedIconFromHeadItem = function (headItem)
{
    var defaultNodeIcon = "../images/Icons/16x16/16x16_fileCopy.gif"; // default
    if (headItem !== undefined && ! headItem.isError())
    {
      var nodeIcon = headItem.getProperty("document_hierarchy_icon_open","");
      if (nodeIcon !== "") 
      {
        return nodeIcon;
      }
      // use the same as closed icon ?
      if (headItem.getProperty("document_hierarchy_icon","") != "../images/Icons/16x16/16x16_files.gif")
      {
        return headItem.getProperty("document_hierarchy_icon","");
      }
    }
    return defaultNodeIcon;
};

// ============================= Click  Handlers ===============================
fn_initToolbar = function (doInit) {
  if (doInit) 
  {
    // set startup query option
    if (isStartedFromTab) {
      toolbar1_Control.getActiveToolbar().getElement('query_option').setSelected("current_config");
      queryOption = "current_config";
      isEnableQueryOption=true;
    }
    else {
      toolbar1_Control.getActiveToolbar().getElement('query_option').setSelected("latest_released");
      queryOption = "latest_released";
      isEnableQueryOption=false;
    } 
  }

  fn_setTbControlEnabled("expandall", true);
  fn_setTbControlEnabled("collapseall", true);
  fn_setTbControlEnabled("open_row_item", true);
  fn_setTbControlEnabled("open_change_details", true);
  fn_setTbControlEnabled("change_status_check", true);
  if (isEnableQueryOption) {fn_setTbControlEnabled("query_option", true);}
  
  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbar1_Control.showLabels(val);
};

toolbar1_onToolbarClick = function (item) {
	treeGrid1_Control.turnEditOff();
	if (item.getId() == "expandall") {treeGrid1_onExpandAll();}
	if (item.getId() == "collapseall") {treeGrid1_onCollapseAll();}
	if (item.getId() == "refresh_all") {window.RefreshGrid(true);}
    if (item.getId() == "open_row_item") {treeGrid1_onOpenRowItem();}
    //if (item.getId() == "query_option") {treeGrid1_onQueryOption(item);}
//	if (item.getId() == "insert_new_row") {treeGrid1_onInsertNewRow();}
};

toolbar1_onToolbarOnChange = function (item) {
  if (queryOption !== "" && item.getId() == "query_option") 
  {
    queryOption = item.GetSelectedItem();
    window.RefreshGrid(false);
  }
  return;
};

treeGrid1_onGridMenuInit = function (row,col,p) {
	var mnu = treeGrid1_Control.getMenu();
	mnu.removeAll();
	mnu.add("open_row_item","View Item");
	mnu.AddSeparator();
	mnu.add("view_document_files","View Document Files");
	
	if (isStartedFromTab)
	{
	  mnu.AddSeparator();
      mnu.add("action_release_hierarchy_node","Release Hierarchy Nodes (down)");
	  mnu.add("action_revise_hierarchy_node","Revise Hierarchy Nodes (up)");
	  mnu.AddSeparator();
	  mnu.add("update_doc_to_latest_released","Update To latest Released Document");
	}
	mnu.show();
};

treeGrid1_onGridMenuClick = function (menuChoice) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  
  if (menuChoice == "open_row_item") {treeGrid1_onOpenRowItem();}
  if (menuChoice == "view_document_files") {treeGrid1_onViewDocumentFiles();}
  if (menuChoice == "action_release_hierarchy_node") {treeGrid1_actionReleaseNode();}
  if (menuChoice == "action_revise_hierarchy_node") {treeGrid1_actionReviseNode();}
  if (menuChoice == "update_doc_to_latest_released") {treeGrid1_updateToLastetReleasedDocument();}
};

treeGrid1_onTreeGridOpenNode = function (rowId) {
  var hasSubLevelsLoaded = treeGrid1_Control.getUserData(rowId,"gridData_hasSubLevelsLoaded");
  if (hasSubLevelsLoaded !== "1") {
    fn_reloadNextLevelOfThisRow (rowId,2);
    treeGrid1_Control.setUserData(rowId,"gridData_hasSubLevelsLoaded","1");
  }
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount());

};

fn_reloadNextLevelOfThisRow = function (rowId, nextLevels) {
  if (!rowId) {return;}
  var rowType = treeGrid1_Control.getUserData(rowId,"gridData_rowItemType");
  if (!rowType || rowType === undefined){ rowType="";}
  
  // reload the next 2 levels of this Item Foler  
  if (rowType === "Document Hierarchy Node")
  {
    treeGrid1_MsgsId = top.aras.showStatusMessage(0, "Loading Next Levels...", '../images/Animated/ProgressSmall.gif');

    fn_MultiLevelItems_LoadNextLevelsForThisNodeToTreeGrid ( treeGrid1_Control,rowId,
      thisItemType,itemSelectProperties,
      thisStructRelType,relSelectProperties,
      columnProperties,columnDisplayTypes,nextLevels);

    top.aras.clearStatusMessage(treeGrid1_MsgsId);
  }
};

treeGrid1_onExpandAll = function () {
//debugger;
  // get confirmation to load from sercver
  // else current structure already loaded will be expanded
  //if(confirm("Do you want to load the entire hierarchy ?  For large hierarchies this can take considerable time."))
  //{
    var rootRowIds = "#" ;
    id_array = treeGrid1_Control.GetVisibleItemIDs("|").split("|");
    for (var x = 0 ; x < id_array.length ; x++) {
        if (!treeGrid1_Control.GetParentId(id_array[x]))
        {
          rootRowIds += "," + id_array[x];
        }
    }
    rootRowIds = rootRowIds.replace(/\#,/,"");
    if (rootRowIds.indexOf(",") < 0) //single root
    {
      rootRowIds = treeGrid1_Control.GetChildItemsId(rootRowIds,false,",");
    }
    id_array = rootRowIds.split(",");
    for (x = 0 ; x < id_array.length ; x++) {
      fn_reloadNextLevelOfThisRow (id_array[x],-1);  // -1 will load all levels down
    }
  //}
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount());

  treeGrid1_Control.ExpandAll();
};

treeGrid1_onCollapseAll = function () {
  treeGrid1_Control.CollapseAll();
};

treeGrid1_onGridDoubleClick = function (r) {
  treeGrid1_onOpenRowItem();
};

treeGrid1_onGridClick = function (row,c) {
  fn_setTbControlEnabled("open", true);

  // if clicked on a link ?
  if (clickedGridLinkValue && clickedGridLinkValue !== "")
  {
    clickedGridLinkValue = "";

    treeGrid1_onViewDocumentFiles();
    //treeGrid1_onOpenRowItem();
  }
};

treeGrid1_onOpenRowItem = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  top.aras.uiShowItem(itemType, itemId);
};

treeGrid1_onGridLinkClick = function (strLink) {
  //assumes only 1 link per row that links to the row's data item
  clickedGridLinkValue = strLink; 
};

treeGrid1_onViewDocumentFiles = function () {
  //debugger;
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
   return;
  }
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  if (itemType !== "Document")
  {
    top.aras.AlertError("This action is only allowed on 'Document' rows !");
    return;
  }

  var argsItem = innovator.newItem(itemType,"get");
  argsItem.setID(itemId);

  var result = top.aras.evalMethod ("DocuHierarchy ViewDocumentFiles",argsItem.dom.xml);
  if (result.isError ()) {top.aras.AlertError (result);} 
  return;
};

treeGrid1_actionReleaseNode = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
   return;
  }
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  if (itemType !== "Document Hierarchy Node")
  {
    top.aras.AlertError("This action is only allowed on 'Document Hierarchy Node' rows !");
    return;
  }

  var argsItem = innovator.getItemById(itemType,itemId);
  top.aras.evalMethod ("DocuHierarchy StructReleas DownA",argsItem.dom.xml);
  return;
};

treeGrid1_actionReviseNode = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
   return;
  }
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  if (itemType !== "Document Hierarchy Node")
  {
    top.aras.AlertError("This action is only allowed on 'Document Hierarchy Node' rows !");
    return;
  }
  var argsItem = innovator.getItemById(itemType,itemId);
  top.aras.evalMethod ("DocuHierarchy StructRevise UpA",argsItem.dom.xml);
  return;
};

treeGrid1_updateToLastetReleasedDocument = function () {
  //debugger;
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
   return;
  }
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  if (itemType !== "Document")
  {
    top.aras.AlertError("This action is only allowed on 'Document' rows !");
    return;
  }

  var parentId = treeGrid1_Control.GetParentId(selectedId);
  if (parentId)
  {
    var parentItemId = treeGrid1_Control.getUserData(parentId,"gridData_rowItemID");
    var parentItemType = treeGrid1_Control.getUserData(parentId,"gridData_rowItemType");

    // fetch details of relationship to Document
    var qry = "<Item type='Document Hierarchy Document' action='get' ";
    qry += "select='related_id(id,generation,state,is_released,item_number,owned_by_id),source_id(id,generation,state,is_released,owned_by_id)' >";
    qry += "<source_id>"+ parentItemId +"</source_id>";
    qry += "<related_id>" + itemId + "</related_id></Item>";

    var relItem = top.aras.newIOMItem("","");
    relItem.loadAML(qry);
    relItem = relItem.apply();
    if (relItem.isError) {top.aras.AlertError(relItem.getErrorString());return;}

    // check if parent item is released
    var checkItem = relItem.getPropertyItem("source_id");
    if (checkItem.getProperty("state","") !== "Released" && checkItem.getProperty("is_released","0") !== "1")
    {
      top.aras.AlertError("Parent item must be 'Released' for this action !");
      return;
    }

    // check if user is owner of parent item
    checkItem = top.aras.newIOMItem(parentItemType,"get");
    checkItem.setID(parentItemId);
    checkItem = top.aras.evalMethod ("IsUser Member Of ItemOwner",checkItem.dom.xml);
    if (checkItem.isError) {top.aras.AlertError(checkItem.getErrorString());return;}
   
    // check if latest released document is new than this generation of the document
    checkItem = relItem.getPropertyItem("related_id");
    var currentDocGen = checkItem.getProperty("generation","");
    var currentDocNum = checkItem.getProperty("item_number","");
    checkItem = checkItem.apply("Get Latest Released Item By Num");
    if (checkItem.isError) {top.aras.AlertError(checkItem.getErrorString());return;}
    
    var latestReleasedDocGen = checkItem.getProperty("generation","");
    if (latestReleasedDocGen <= currentDocGen)
    {
      top.aras.AlertError("This document does not have a released revision newer than this revision !");
      return;
    }

    // force an update of the related id of the relationship
    relItem.setAttribute("newRelatedId",checkItem.getID());
    checkItem = relItem.apply("Update RelShip related_id");  // server method from Common Utilties
    if (checkItem.isError) {top.aras.AlertError(checkItem.getErrorString());return;}
    
    alert ("Update has finished. Please refresh the grid to see the result.");
    return;
  }
  
};]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Document Hierarchy Grid Handler</name>
 </Item>
</AML>