<AML>
 <Item type="Method" id="CAF67CD144FD4D5085D03CBC12FAA0E1" action="add">
  <comments>called from Action</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[' this method must be called from an item action
' from ItemTypes: "Document Collection" or "Document Hierarchy Node"

'MethodTemplateName=VBMain;
Dim res As Item
Dim inn As Innovator

Function Main() As Item
  'System.Diagnostics.Debugger.Break()

  Dim thisItemType As String = Me.GetType()
  Dim thisItemId As String = Me.GetID()
  inn = Me.getInnovator()

  res = fn_RunChecksOnItem(Me)
  If res.isError() Then Return res

  Dim suIdentity As Aras.Server.Security.Identity  = Aras.Server.Security.Identity.GetByName("Aras PLM")
  Dim suIdentityWasGranted As Boolean = Aras.Server.Security.Permissions.GrantIdentity(suIdentity)

  Dim thisItem As Item = Me

Select Case thisItemType
 Case "Document Collection"
   'version the head item, only
   res = fn_versionThisItem(thisItem)
   If res.isError() Then Return res

 Case "Document Hierarchy Node"

   res = fn_ReviseReleasedDocHierarchyNodeUp(thisItem)
   If res.isError() Then Return res

   ' now version this Node, as well
   res = fn_versionThisItem(thisItem)
   If res.isError() Then Return res

   'and finally revise the Document Collection (header item) of this hierarchy, if still released.
   Dim headerItemId As String = thisItem.getProperty("header_item_id_string","")
   If headerItemId <> "" Then
     Dim headerItem As Item = inn.getItemById(thisItem.getProperty("header_item_type",""),headerItemId)

     If headerItem.getProperty("state","") = "Released" Then
       res = fn_RunChecksOnItem(headerItem)
       If res.isError() Then Return res

       res = fn_versionThisItem(headerItem)
     End If
   End If
End Select

If suIdentityWasGranted Then Aras.Server.Security.Permissions.RevokeIdentity(suIdentity)

Return res
End Function

'-----------
Private Function fn_RunChecksOnItem (ByRef thisItem As Item) As Item
  ' unsaved item
  If(thisItem.isNew() Or thisItem.getAttribute("isTemp", "").Equals("1", StringComparison.OrdinalIgnoreCase)) Then
    Return inn.newError(CCO.ErrorLookup.Lookup("PE_CreateNewRevision_MustBeSaved", thisItem.GetType()))
  End If

  ' Item must be In the Released state
  Dim isInReleasedState As Boolean = String.Equals(thisItem.getProperty("state",""), "Released", StringComparison.Ordinal)
  If (Not isInReleasedState) Then
    Return inn.newError(CCO.ErrorLookup.Lookup("PE_ManualRelease_MustBeInReleasedState", thisItem.GetType()))
  End If

  ' Make sure the current user Is In the Owner identity
  Dim ownedById As String = thisItem.getProperty("owned_by_id")
  If (Not CCO.Permissions.IdentityListHasId(Aras.Server.Security.Permissions.Current.IdentitiesList, ownedById)) Then
    Return inn.newError(CCO.ErrorLookup.Lookup("PE_ManualRelease_YouMustBeAMember", thisItem.getPropertyAttribute("owned_by_id","keyed_name","Owner")))
  End If

  ' is item latest generation
  res = inn.newItem(thisItem.GetType(),"")
  res.SetID(thisItem.GetID())
  res = res.apply("Get ItemID Of Current Gen")
  If thisItem.GetID() <> res.getProperty("id","") Then Return inn.newError("This is an older version of this item ! You can only revise the most current version.")

  Return thisItem
End Function

'-----------
Private Function fn_ReviseReleasedDocHierarchyNodeUp (ByRef nodeItem As Item) As Item
  Dim nodeIdsList As String = fn_GetNodeIdsOfHierarchyWhereUsedToTop(nodeItem)
  nodeIdsList = "'" & nodeIdsList.Replace(",","','") & "'"
  
  Dim amlCmd As String = "<Item type='" & nodeItem.GetType() & "' action='get' serverEvents='0' select='state,is_released,id,locked_by_id(keyed_name),name' >"
  amlCmd = amlCmd & "<id condition='in'>" & nodeIdsList & "</id>"
  amlCmd = amlCmd & "<state>Released</state>"
  amlCmd = amlCmd & "<locked_by_id condition='is null'/>"  'just in case a power user has locked the released item
  amlCmd = amlCmd & "</Item>"
  Dim whereUsedNodes As Item = inn.newItem("","")
  whereUsedNodes.loadAML(amlCmd)
  whereUsedNodes = whereUsedNodes.apply()
  
  Dim i As Integer
  For i=0 To whereUsedNodes.getItemCount()-1
    'revise the child node
    res = fn_versionThisItem(whereUsedNodes.getItemByIndex(i))
    If res.isError() Then Return res
  Next i

  Return Me
End Function

'-----------
Private Function fn_GetNodeIdsOfHierarchyWhereUsedToTop (ByRef nodeItem As Item) As String
  nodeItem.setAttribute("relationshipName","Document Hierarchy")
  res = nodeItem.apply("Get ItemIDs of Structure Up") 'generic method from Common Utitities
  If res.isError() Then Return ""
  
  Return res.getResult()
End Function

'-----------
Private Function fn_versionThisItem (ByRef thisItem As Item) As Item
  Dim r As Item = inn.newItem(thisItem.GetType(),"get")

  'only version if current item is in released state
  If thisItem.getProperty("is_released") <> "1" And  thisItem.getProperty("state") <> "Released" Then Return thisItem 'do nothing
  
  r.SetID(thisItem.GetID())
  If thisItem.getProperty("state","") <> "" Then r.setProperty("state",thisItem.getProperty("state",""))
  If thisItem.getProperty("owned_by_id","") <> "" Then r.setProperty("owned_by_id",thisItem.getProperty("owned_by_id",""))
  If thisItem.getProperty("keyed_name","") <> "" Then r.setProperty("keyed_name",thisItem.getProperty("keyed_name",""))
  
  r = r.apply("version")
  If r.isError() Then Return r
  r = r.apply("unlock")

  Return r
End Function
]]></method_code>
  <method_type>VB</method_type>
  <name>DocuHierarchy StructRevise Up</name>
 </Item>
</AML>