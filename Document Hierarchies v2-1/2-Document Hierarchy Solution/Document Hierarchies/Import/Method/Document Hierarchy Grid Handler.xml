<AML>
 <Item type="Method" id="0C2D6537355C46DF80AAFF91BBF1017A" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Client side Method: treeGrid1 Handler
// 
// load with --> onLoad Event on Form:
//
// the variable treeGrid1_Control is defined globally in separate HTML code on form field
// the variable toolbar1_Control is defined globally in separate HTML code on form field
//
//  ---- history -----
//  RL  02.05.2012          initial version - cloned grid from ML CAD Struct Handler
//  RL  02.09.2012          v1-3 - cloned grid from ML CAD Struct Handler
//  RL  19.08.2013          v2-0. reworked to work with new html skeleton and TreeGridContainer
//                          Works with renamed ItemTypes. Document Book, Document Section
//                          Optimized loading based on has_sub_sections flag
//                         - added menu actions, if rootItem is locked by user
//                             Refesh Section
//                             lock/unlock
//                             Attach File
//                             Add exsiting Document
//                             Add Sub Section
//                             Add New Contrilled Item
//  RL  28.08.2013          v2-1. Added i18n support for toolbar, menus and messages. (language files in: Client/Solutions/DocumentHierarchies/xml)
//
// ====================================================================================================================
// grid.setUserData/grid.getUserData is used to store additional information critical for the logic to work properly.
// Like: click actions after the grid is loaded. or, reloading logic on expand events.

// the user data keys used in this module are:
//    gridData_rowItemType         --> holds the item type name of the child item presented on the grid's tree
//    gridData_rowItemID           --> holds the 32char id of the child item presented on the grid's tree
//    gridData_parentItemId        --> holds the 32char id of the parent item of row presented on the grid's tree
//    gridData_hasSubLevelsLoaded  --> set to '1', if this row was expanded once already
//    gridData_hasHierarchyDetails --> set to '1', when documents are linked to hierarchy nodes (sections)
// ====================================================================================================================
if (OnLoadMethodsLoaded) {return;}

//----- callback called from html field's code -------------
window.RefreshGrid = function(doInit,item)
{
  if(doInit) { setTimeout("fn_RefreshGrid (true);", 150); }
  else  { setTimeout("fn_RefreshGrid (false);", 150); }
};

//----- callback called from html field's code -------------
window.populateToolbar1 = function(enableControls, formItemTypeName)
{
  if(enableControls && enableControls !== undefined) {enableControls = true;}

  if (formItemTypeName && formItemTypeName !== undefined){mainFormItemTypeName=formItemTypeName;}

  toolbar1_Control.loadXML(top.aras.getI18NXMLResource("DocumentHierarchyToolbar.xml", "../Solutions/DocumentHierarchies/"));
  toolbar1_Control.show();

  // initialize setting on toolbar control
  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbar1_Control.showLabels(val);

  if (!initGlobalVariables()){return;}

// -- give the toolbar some time to load before accessing its controls
  setTimeout("initTbControls();", 100); 

};
initTbControls = function()
{
  fn_enableToolbarControls(false); 
	// set startup query option
    if (isStartedFromTab) {
      toolbar1_Control.getActiveToolbar().getElement('effectivity_option').setSelected("current_config");
      effectivityOption = "current_config";
      isEnableEffectivityOption=true;
    }
    else {
      toolbar1_Control.getActiveToolbar().getElement('effectivity_option').setSelected("latest_released");
      effectivityOption = "latest_released";
      isEnableEffectivityOption=false;
    } 
};
window.populateTreeGrid1 = function(item)
{
  // populate the grid
  if(item && item !== undefined) {argsItem = item;}
  
  setTimeout("window.RefreshGrid (true,item);", 150); 
};

var isStartedFromTab = (top.relationships && typeof(top.relationships) !== undefined);
var result;

// other global variables
var hierarchyNodeIconOpened,hierarchyNodeIconClosed;
var relatedDocIconProperty;
var gridRowHeight=20;
var mainFormItemTypeName;
var GridXMLHeader = '';
var effectivityOption = "";
var statusMsgId ="";
var isEnableEffectivityOption;
var docBookItemType="";
var docBookItemId="";
var docBookItem;
var rootItem,rootItemType,rootItemId;
var skipRefresh;
var fixEffectivityToReleased;
var isTopSectionParentItemLocked;

//-----------------------------------
DefCellClass = function() {  // ## cell classes are not in use, yet - future extentions
};

// Grid Class instantiation
//-----------------------------------
DocumentHierarchyGrid = function DocumentHierarchyGridFunc()
{

  this.itemType = "Document Section";
  this.clickedGridLinkValue = "";

  relatedDocIconProperty = "published_file_type_icon";
  
  this.itemSelectProperties = "short_name,name,description,state,locked_by_id,classification,major_rev,modified_on,owned_by_id,managed_by_id,is_current,is_released";
  this.itemSelectPropertiesRelatedDocs = "item_number,name,description,state,generation,locked_by_id,classification,major_rev,minor_rev,release_date,has_change_pending,has_change_icon,has_files,has_files_icon,owned_by_id,managed_by_id,is_current,is_released,"+relatedDocIconProperty;
  this.relSelectProperties = "sort_order,language_effectivity";

  // Definiton of grid layout and header titles -- must be in order left to right !
  if (isStartedFromTab) 
  {
    // for document rows
    this.columnPropertiesRelatedDocs = "item.item_number,rel.sort_order,rel.language_effectivity,item.locked_by_id,item.published_file_type_icon,item.has_files_icon,item.name,item.major_rev,item.generation,item.is_current,item.state,item.has_change_pending,item.release_date,item.owned_by_id,item.classification,item.description";
    this.columnDisplayTypesRelatedDocs = "tree:as_link,text,text,lock,image,text:as_link,text,text,text,not_current_gen,text:bg_color,check,date,item(keyed_name),text,text";

    this.gridColumnList = [
	{Name: "Tree",		Width: "280",	Align: "l"	,Edit: "noedit",	DefaultOrder: 0, CellValueFormat: "tree++",			Title: top.aras.getResource("DocumentHierarchies", "dochierarchygrid.gridheading.col0") , Property: "item.short_name+name", Class: DefCellClass}, 
	{Name: "Sort",		Width: "40",	Align: "r"	,Edit: "noedit",	DefaultOrder: 1, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document Hierarchy","sort_order") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Language",	Width: "70",	Align: "c"	,Edit: "noedit",	DefaultOrder: 2, CellValueFormat: "text:#-#",			Title: fn_getColumnLabelByName("Document Section Document","language_effectivity") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Lock",		Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 3, CellValueFormat: "lock",			Title: fn_getColumnLabelByName("Document","locked_by_id") , Property: "item.locked_by_id", Class: DefCellClass}, 
	{Name: "DocIcon",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 4, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","published_file_type_icon") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "HasFiles",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 5, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","has_files") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Name",		Width: "200",	Align: "l"	,Edit: "noedit",	DefaultOrder: 6, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","name") , Property: "item.name", Class: DefCellClass}, 
	{Name: "Revision",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 7, CellValueFormat: "text",			Title: fn_getColumnLabelByName("Document","major_rev") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Gen",		Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 8, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","generation") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "IsCurrent",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 9, CellValueFormat: "not_current_gen",Title: fn_getColumnLabelByName("Document","is_current") , Property: "item.is_current", Class: DefCellClass}, 
	{Name: "Status",	Width: "80",	Align: "c"	,Edit: "noedit",	DefaultOrder: 10, CellValueFormat: "text:bg_color", 	Title: fn_getColumnLabelByName("Document","state") , Property: "item.state", Class: DefCellClass}, 
	{Name: "HasChange",	Width: "50",	Align: "c"	,Edit: "noedit",	DefaultOrder: 11, CellValueFormat: "check",			Title: fn_getColumnLabelByName("Document","has_change_pending") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "ReleasedOn",Width: "80",	Align: "l"	,Edit: "noedit",	DefaultOrder: 12, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","release_date") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Owner",		Width: "150",	Align: "l"	,Edit: "noedit",	DefaultOrder: 13, CellValueFormat: "item(keyed_name)", Title: fn_getColumnLabelByName("Document","owned_by_id") , Property: "item.owned_by_id", Class: DefCellClass}, 
	{Name: "Classification", Width: "100",Align: "l",Edit: "noedit",	DefaultOrder: 14, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","classification") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Descr",		Width: "250",	Align: "l"	,Edit: "noedit",	DefaultOrder: 15, CellValueFormat: "text", 			Title: fn_getColumnLabelByName("Document","description") , Property: "item.description", Class: DefCellClass}
    ];

    this.lockIconColumnNo = 3; 
    this.hasFilesIconColumnNo = 5;
    this.statusColumnNo = 10;
  }
  // different when started from TOC view
  else
  {
    this.columnPropertiesRelatedDocs = "item.item_number,rel.sort_order,item.published_file_type_icon,item.has_files_icon,item.name,item.major_rev,item.generation,item.release_date,item.owned_by_id,item.classification,item.description";
    this.columnDisplayTypesRelatedDocs = "tree:as_link,text,image,text:as_link,text,text,text,date,item(keyed_name),text,text";

    this.gridColumnList = [
	{Name: "Tree",		Width: "280",	Align: "l"	,Edit: "noedit",	DefaultOrder: 0, CellValueFormat: "tree++",			Title: top.aras.getResource("DocumentHierarchies", "dochierarchygrid.gridheading.col0") , Property: "item.short_name+name", Class: DefCellClass}, 
	{Name: "Sort",		Width: "40",	Align: "r"	,Edit: "noedit",	DefaultOrder: 1, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document Hierarchy","sort_order") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "DocIcon",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 2, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","published_file_type_icon") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "HasFiles",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 3, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","has_files") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Name",		Width: "200",	Align: "l"	,Edit: "noedit",	DefaultOrder: 4, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","name") , Property: "item.name", Class: DefCellClass}, 
	{Name: "Revision",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 5, CellValueFormat: "text",			Title: fn_getColumnLabelByName("Document","major_rev") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Gen",		Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 6, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","generation") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "ReleasedOn",Width: "80",	Align: "l"	,Edit: "noedit",	DefaultOrder: 7, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","release_date") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Owner",		Width: "150",	Align: "l"	,Edit: "noedit",	DefaultOrder: 8, CellValueFormat: "item(keyed_name)", Title: fn_getColumnLabelByName("Document","owned_by_id") , Property: "item.owned_by_id", Class: DefCellClass}, 
	{Name: "Classification", Width: "100",Align: "l",Edit: "noedit",	DefaultOrder: 9, CellValueFormat: "text:#-#",		Title: fn_getColumnLabelByName("Document","classification") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Descr",		Width: "250",	Align: "l"	,Edit: "noedit",	DefaultOrder: 10, CellValueFormat: "text", 			Title: fn_getColumnLabelByName("Document","description") , Property: "item.description", Class: DefCellClass}
    ];

    this.lockIconColumnNo = -1; 
    this.hasFilesIconColumnNo = 5;
    this.statusColumnNo = -1;
  }
  
  // comma separated lists needed for AddRow helper functions (later)
  this.columnProperties = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnProperties");
  this.columnWidths = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnWidths");
  this.columnAlign = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnAlign");
  this.columnDisplayTypes = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnCellValueFormats");

  this.gridStructureItemType = "Document Section";
  this.gridStructureRelType = "Document Hierarchy";
};

//--------------
initGlobalVariables = function ()
{
  top.treeGrid1 = new DocumentHierarchyGrid;

  //debugger;
  //-----------
  if (isStartedFromTab) 
  {
	mainFormItemTypeName = "";
    rootItem = top.frames[1].document.thisItem;
	rootItemType = rootItem.getAttribute("type","");
    rootItemId = rootItem.getAttribute("id","");

    if (rootItemType !== "Document Book") {
      docBookItemType = rootItem.getProperty("header_item_type","");
      if (docBookItemType === "Document Collection") {docBookItemType = "Document Book";} //## compatibility with data generated by oder version of Document Hierarchies
      docBookItemId = rootItem.getProperty("header_item_id_string","");
      if (docBookItemType === ""){
	   alert ("Cannot read property 'header_item_type' from '"+rootItemType+"' with id '"+rootItemId+"'");
	   return false;
	  }      
	  docBookItem = innovator.getItemById(docBookItemType, docBookItemId);
    }  
	
	
  }
  else
  {
    effectivityOption = "latest_released";
    itemTypeName = mainFormItemTypeName;

    //assumes a variable with name "DCTOCIT_" followed by "itemTypeName"
    // TOCBK = Document Book TOC Item Type
    var DCLvariableItem = innovator.newItem("Variable","get");
    DCLvariableItem.setProperty("name","TOCBK_"+itemTypeName);
    DCLvariableItem = DCLvariableItem.apply();
    if (DCLvariableItem.isError()) {alert("Variable '"+"TOCBK_"+itemTypeName+"' not defined !");return false;}
    
    // now get the "current" header item connector to this TOC item
    rootItemType = "Document Book";
    var docBookItemNumber = DCLvariableItem.getProperty("value","invalid");  //value must have format <item_number>,<major_rev>
    var docBookItemRev = docBookItemNumber.split(",")[1];
    if (!docBookItemRev) {docBookItemRev="";}
    docBookItemNumber = docBookItemNumber.split(",")[0];
    
    fixEffectivityToReleased = true;

    rootItem = fn_getReleasedItemOfMajorRev(rootItemType,docBookItemNumber,docBookItemRev);
    if (rootItem.getItemCount() != 1) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.no_released_version_of_book_found")+ "("+docBookItemNumber+" Rev:"+docBookItemRev+")");return;}
    rootItemId = rootItem.getID();

    if (rootItem.isError()) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_retrieving_root_item") + rootItem.getErrorString());return false;}
   
    //update missing context
    document.thisItem = rootItem;
    I18Ncntx = innovator.getI18NSessionContext();

  }

  skipRefresh = false;
  
  return true;
};

//-----------------------------------
fn_RefreshGrid = function(doInit, isLoadAll)
{
  if(doInit === undefined) {doInit = true;}
   	
  if(doInit)
  {
    top.treeGrid1.Initialized = false;
    top.treeGrid1.Initialize();
  }
  if (skipRefresh) {skipRefresh = false; return;}   

  try
  {
    top.treeGrid1.Draw(true,isLoadAll);
    skipRefresh = false;
  }
  finally
  {
  }
};

//==================== Grid Layout & Style ===================================
var standardGridFont= "Microsoft Sans Serif-8";
var italicGridFont= "Microsoft Sans Serif-italic-8";

//------- Initialize the layout of the Grid
DocumentHierarchyGrid.prototype.Initialize = function DocumentHierarchyGrid_Initialize()
{
 //debugger;
  if (!top.treeGrid1.columnProperties || top.treeGrid1.columnProperties === "") {return;}
  if (top.treeGrid1 && top.treeGrid1.Initialized) {return;}

  GridXMLHeader = '';
  GridXMLHeader += '<?xml version="1.0"?><table font="' + standardGridFont + '" ';
  GridXMLHeader += 'backgroundColor="white" ';
  GridXMLHeader += 'sel_bgColor="steelbue" '; // html predefined
  GridXMLHeader += 'sel_TextColor="white" ';
  GridXMLHeader += 'header_BgColor="buttonface" ';
  GridXMLHeader += 'delim ="|" ';
  //GridXMLHeader += 'zebra="true" ';
  GridXMLHeader += 'editable="false" ';
  GridXMLHeader += 'draw_grid="true" ';
  GridXMLHeader += 'multiselect="false" ';
  GridXMLHeader += 'enableHtml="false" ';
  GridXMLHeader += 'enterAsTab="false" ';
  GridXMLHeader += 'bgInvert="true" ';    
  GridXMLHeader += 'expandroot="true" ';
  GridXMLHeader += 'expandall="false" ';
  GridXMLHeader += 'treelines="1" ';
  GridXMLHeader += 'locale="enUS" ';
  GridXMLHeader += 'onrowselect="treeGrid1_onGridClick" ';
  GridXMLHeader += 'onDoubleClick="treeGrid1_onGridDoubleClick" ';

  GridXMLHeader += '  column_draggable="true" ';
//  GridXMLHeader += '  xmlns:msxsl="urn:schemas-microsoft-com:xslt" ';
//  GridXMLHeader += '  xmlns:aras="http://www.aras.com" ';
//  GridXMLHeader += '  xmlns:usr="urn:the-xml-files:xslt" >';

  GridXMLHeader += '> ';

  // column headings
  GridXMLHeader += '<thead>';
  
	for(var columnIndex = 0; columnIndex < top.treeGrid1.gridColumnList.length; columnIndex++) {
		GridXMLHeader += ' <th align="c">' + top.treeGrid1.gridColumnList[columnIndex].Title + '</th>';
	}
	GridXMLHeader += '' +
	' </thead>' +
	' <columns>';	
	for(columnIndex = 0; columnIndex < top.treeGrid1.gridColumnList.length; columnIndex++) {
		GridXMLHeader += ' <column width="' + top.treeGrid1.gridColumnList[columnIndex].Width + '" align="' + top.treeGrid1.gridColumnList[columnIndex].Align + '" edit="' + 
				top.treeGrid1.gridColumnList[columnIndex].Edit + '" order="' + top.treeGrid1.gridColumnList[columnIndex].DefaultOrder + '" colname="' + top.treeGrid1.gridColumnList[columnIndex].Name + '" />';
	}	
	GridXMLHeader += '' +
	' </columns>';
  
  GridXMLHeader += '<menu>';
  GridXMLHeader += '<emptytag/>';
  GridXMLHeader += '</menu>';
  GridXMLHeader += '</table>';

  top.treeGrid1.Initialized = true;  

  if (isStartedFromTab) 
  {
    var lockStat = document.thisItem.getLockStatus();
    if (lockStat == 1) {isTopSectionParentItemLocked = true;}
    else {isTopSectionParentItemLocked = false;}
  }
  else
  {
    isTopSectionParentItemLocked = false;
  }
};

//------- function passed to functions of Common Grid Handler
//--------------
top.fn_addRelatedItemsToThisNodeLevel = function(gridCtrl, parent_row_id, sourceItemId)  {
  fn_addDocumentSectionRelatedDocsToRow(gridCtrl, parent_row_id, sourceItemId);
};

//------- populate the Grid
DocumentHierarchyGrid.prototype.Draw = function DocumentHierarchyGrid_Draw(forceGetRelationships, isLoadAll)
{
  if (!rootItem || rootItem === undefined || rootItem.isError()) {return;}
  
  fn_setTbControlEnabled("book_number_rev", false, false); // always disabled

  //debugger;
  treeGrid1_Control.clear();treeGrid1_Control.focus();
  treeGrid1_Control.InitXml(GridXMLHeader);	
  fn_clearResultsOnStatusBar();

  treeGrid1_Control.HideOnLoad="true";

  top.fn_addRelatedItemsToThisNodeLevel = fn_addDocumentSectionRelatedDocsToRow;

  //==================================
  fn_enableToolbarControls(false);

  var isReleasedStructure = false;

  if (effectivityOption == "latest_released") {isReleasedStructure=true;}

  switch (rootItemType)
  {
    case "Document Book":
       docBookItemId = rootItem.getID();
       if (isReleasedStructure && isStartedFromTab )
       {
          // get ID of latest released generation of Document Book item
          docBookItem = fn_getReleasedItemOfMajorRev("Document Book",rootItem.getProperty("item_number",""),rootItem.getProperty("major_rev",""));
          if (docBookItem.isError()) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_getting_released_book_of_rev") + docBookItem.getErrorString());return;}
          docBookItemId = docBookItem.getID();
       }
	   else
	   {
         docBookItem =  rootItem;  //current gen of Document Book
       }

       // display Book number and rev on toolbar
       if (!isStartedFromTab)
       {
         if (toolbar1_Control.getActiveToolbar().getElement('book_number_rev')){toolbar1_Control.getActiveToolbar().getElement('book_number_rev').setText(" "+rootItem.getProperty("item_number","")+" Rev: "+rootItem.getProperty("major_rev",""));}
         if (toolbar1_Control.getActiveToolbar().getElement('book_number_rev')){toolbar1_Control.getActiveToolbar().ShowItem("book_number_rev");}
       }
       else
       {
         if (toolbar1_Control.getActiveToolbar().getElement('book_number_rev')){toolbar1_Control.getActiveToolbar().HideItem("book_number_rev");}
       }

       // get Grid Icons
       hierarchyNodeIconClosed = fn_getClosedIconFromHeadItem(docBookItem);
       hierarchyNodeIconOpened = fn_getOpenedIconFromHeadItem(docBookItem);

       // get top level Nodes of Document Book
       var qry = "<Item type='Document Book DocSection' action='get' ";
       qry += "select='id,sort_order,related_id(keyed_name)' >";
       qry += "<source_id>"+ docBookItemId +"</source_id>";
       qry += "<related_id><Item type='"+top.treeGrid1.gridStructureItemType+"' action='get' >";

       if (isReleasedStructure) {qry += "<is_released>1</is_released>";}

       qry += "</Item></related_id></Item>";
       
       var topNodes = innovator.newItem("","");
       topNodes.loadAML(qry);
       topNodes = topNodes.apply();

       // Display Hierarchy of each top node
       for (var t=0; t<topNodes.getItemCount();t++)
       {
         var topNodeItemId = topNodes.getItemByIndex(t).getProperty("related_id","");
		 if (!fn_AddRootSectionToGrid (topNodeItemId, hierarchyNodeIconClosed, hierarchyNodeIconOpened, isLoadAll, isReleasedStructure)) {fn_enableToolbarControls(true);return;}
	   }

       break;
       
    case "Document Section":
       if (toolbar1_Control.getActiveToolbar().getElement('book_number_rev')){toolbar1_Control.getActiveToolbar().HideItem("book_number_rev");}

       // get Grid Icons
       hierarchyNodeIconClosed = fn_getClosedIconFromHeadItem(docBookItem);
       hierarchyNodeIconOpened = fn_getOpenedIconFromHeadItem(docBookItem);

       // Load TopSection
	   if (!fn_AddRootSectionToGrid (rootItemId, hierarchyNodeIconClosed, hierarchyNodeIconOpened, isLoadAll, isReleasedStructure)) {fn_enableToolbarControls(true);return;}
		 
       break;
  }

  //==================================

  treeGrid1_Control.ShowContent();

  fn_enableToolbarControls(true);

  if (treeGrid1_Control.GetRootItemsCount() === 1) {treeGrid1_Control.openItem("ROOT-"+rootItemId);}

  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

//--------------
fn_AddRootSectionToGrid = function(topSectionItemId, sectionIconClosed, sectionIconOpened, isLoadAll, isReleased)  {
  // returns true, if row added. false on error

  // check if top section already saved to server, if error just exit
  // for root item released condition must be ignored.
  var rootItem = innovator.newItem("Document Section","get");
  rootItem.setID(topSectionItemId);
  rootItem.setAttribute("select",top.treeGrid1.itemSelectProperties+ ",owned_by_id,managed_by_id,team_id");
  rootItem = rootItem.apply();
  if (rootItem.isError()) {return false;}
  rootItemId = rootItem.getID();
    
  //debugger;
  var rootRowId = "ROOT-" + rootItemId;
  fn_MultiLevelItems_AddRootRowWithIconToGrid (treeGrid1_Control, rootRowId, top.treeGrid1.columnProperties, top.treeGrid1.columnDisplayTypes, sectionIconClosed, sectionIconOpened, rootItem, false);

  treeGrid1_Control.setUserData(rootRowId,"gridData_rowItemType","Document Section" );
  treeGrid1_Control.setUserData(rootRowId,"gridData_rowItemID",rootItemId );

  // add related documents to this section (relItem) row
  fn_addDocumentSectionRelatedDocsToRow(treeGrid1_Control, rootRowId, rootItemId);

  if (rootItem.getProperty("has_sub_sections","0") == "1") {
    // add dummy sub section to allow expand event to load of next levels
	if (treeGrid1_Control.GetChildItemsCount(rootItemId) <= 0)
	{
	  treeGrid1_Control.InsertNewChild(rootRowId,rootItemId+"-DUMMY", "||||", rootItemId+"-DUMMY","","");
    }
  }
  return true;
};

//--------------
fn_AddSubSectionsToThisSection = function(parentSectionId, parentRowId, sectionIconClosed, sectionIconOpened, isLoadAll, isReleased)  {
  if (!isReleased || isReleased === undefined) {isReleased = false;}

  var amlQry = "<Item type='Document Hierarchy' action='get' ";
  amlQry += "select='id,source_id(owned_by_id,managed_by_id,team_id,locked_by_id,has_sub_sections,has_documents),related_id,"+top.treeGrid1.itemSelectProperties+"' ";
  amlQry += "orderBy='sort_order' ";
  amlQry += ">";
  amlQry += "<source_id>"+parentSectionId+"</source_id>";

  amlQry += "<related_id>";
  amlQry += "<Item type='Document Section' action='get' select='id,config_id,"+top.treeGrid1.itemSelectProperties+"'>";
  if (isReleased) {amlQry += "<is_released>1</is_released>";}
  amlQry += "</Item>";
  amlQry += "</related_id>";
  amlQry += "</Item>";
  var qry = top.aras.newIOMItem("","");
  qry.loadAML(amlQry); 
  var relItemRels = qry.apply();

  // remove dummy sub folder from grid as real next level get loaded
  if (treeGrid1_Control.IsItemExists(parentSectionId+"-DUMMY") ) {treeGrid1_Control.DeleteRow(parentSectionId+"-DUMMY");}
  
  //loop
  var srcId = parentSectionId;
  for (var i=0; i < relItemRels.getItemCount(); i++)
  {
    var thisRel = relItemRels.getItemByIndex(i);
	var srcItem = thisRel.getPropertyItem("source_id");
	relId = thisRel.getProperty("related_id",""); 
	var relItem = thisRel.getPropertyItem("related_id");
    var newRowId = srcId + "-" + relId;

    // now add the sub section row
	fn_MultiLevelItems_AddRowWithIconToGrid (treeGrid1_Control, parentRowId, newRowId,
       top.treeGrid1.columnProperties,top.treeGrid1.columnDisplayTypes,sectionIconClosed,sectionIconOpened, thisRel, true);

	treeGrid1_Control.setUserData(newRowId,"gridData_parentItemId",srcId );
	treeGrid1_Control.setUserData(newRowId,"gridData_rowItemType","Document Section" );
	treeGrid1_Control.setUserData(newRowId,"gridData_rowItemID",relId );

	// add related documents to this section (relItem) row
    fn_addDocumentSectionRelatedDocsToRow(treeGrid1_Control, newRowId, relId);

    // add dummy sub section to allow expand event to load of next levels
	if (relItem.getProperty("has_sub_sections","0") == "1")
	{
	  if (treeGrid1_Control.GetChildItemsCount(newRowId) <= 0)
	  {
	    treeGrid1_Control.InsertNewChild(newRowId,relId+"-DUMMY", "||||", relId+"-DUMMY","","");
	  }
	}
	
	// run recursion to load all
	if (isLoadAll)
	{
	  fn_AddSubSectionsToThisSection(relId, newRowId, sectionIconClosed, sectionIconOpened, isLoadAll);
	}
  }
};

//------------
fn_getReleasedItemOfMajorRev = function(itemType, item_number, major_rev)  {
  if (!major_rev  || major_rev === undefined || major_rev === "") {major_rev= "highestRev";}
  
  var amlCmd = innovator.newItem(itemType,"get");
  amlCmd.setAttribute("serverEvents","0");
  amlCmd.setAttribute("select","generation,state,name,item_number,major_rev,top_hierarchy_node_id,document_hierarchy_icon,document_hierarchy_icon_open");

  if (major_rev == "highestRev")
  {
    amlCmd.setAction("Get Latest Released Item By Num");  // server method from Common Utilities
    amlCmd.setProperty("item_number",item_number);
  }
  else
  {
    amlCmd.setProperty("item_number",item_number);
    amlCmd.setProperty("major_rev",major_rev);
    amlCmd.setProperty("generation","%");
    amlCmd.setPropertyAttribute("generation","condition","like");
  }
  return amlCmd.apply();
};

//------------
fn_addDocumentSectionRelatedDocsToRow = function(gridCtrl, parent_row_id, sourceItemId)  {
  var documentIcon = fn_GetSmallIconFormatOfItemType("Document");

  var langCode = I18Ncntx.GetLanguageCode();
  langCode = langCode.toUpperCase();
  if (!langCode || langCode === undefined || langCode ==="") {langCode = "ALL";}

  var qry = "<Item type='Document Section Document' action='get' ";
  qry += "select='related_id,"+ top.treeGrid1.relSelectProperties + "' >";
  qry += "<source_id>"+ sourceItemId +"</source_id>";
  qry += "<related_id><Item type='Document' action='get' select='id,"+ top.treeGrid1.itemSelectPropertiesRelatedDocs + ",item_type,is_released,generation'>";

  if (effectivityOption == "latest_released") {qry += "<is_released>1</is_released>";}

  qry += "</Item></related_id>";
  
  if (fixEffectivityToReleased) // apply language effectivity - only get rels tagged with user's language or 'ALL'
  {
    qry += "<or>";
    qry += "<language_effectivity>ALL</language_effectivity>";
    qry += "<language_effectivity>"+langCode+"</language_effectivity>";
    qry += "</or>";
  }
  qry += "</Item>";

  var relItemRels = top.aras.newIOMItem("","");
  relItemRels.loadAML(qry);
  relItemRels = relItemRels.apply();
      
  var hierarchyNodeRelatedDocsCount = relItemRels.getItemCount();
  if (hierarchyNodeRelatedDocsCount <=0) {return 0;}

  // loop through query results
  for (var r = 0 ; r < hierarchyNodeRelatedDocsCount ; r++) {
    var relItemRel = relItemRels.getItemByIndex(r);
    var relItemId = relItemRel.getProperty("related_id","");
    var newNodeId = sourceItemId + "-" + relItemId;
    
    if (relItemId !== "") {
       var relItemType = relItemRel.getPropertyItem("related_id").getAttribute("type","");
       var relItemPublishTypeIcon;
       if (gridRowHeight > 20)
       {
         relItemPublishTypeIcon = relItemRel.getPropertyItem("related_id").getProperty("published_file_type_large_icon","");
       }
       else
       {
         relItemPublishTypeIcon = relItemRel.getPropertyItem("related_id").getProperty("published_file_type_icon","");
       }
       if (relItemId !== "") {
         //debugger;
         fn_MultiLevelItems_AddRowWithIconToGrid (gridCtrl, parent_row_id ,newNodeId,
			   top.treeGrid1.columnPropertiesRelatedDocs,top.treeGrid1.columnDisplayTypesRelatedDocs, documentIcon, documentIcon, relItemRel, true);

         gridCtrl.setUserData(newNodeId,"gridData_rowItemType",relItemType );
         gridCtrl.setUserData(newNodeId,"gridData_rowItemID",relItemId );
         
         var numOfCols = top.treeGrid1.columnWidths.split(",").length;
         fn_SetBackgroundColorInRow(treeGrid1_Control,parent_row_id,0,numOfCols-1, "#eeeeee");

         treeGrid1_Control.setUserData(parent_row_id,"gridData_hasHierarchyDetails","1");
       }
    }
  }
  return hierarchyNodeRelatedDocsCount;
};

//-----------------
fn_SetBackgroundColorInRow = function (gridCtrl, row_id, startCell, endCell, colorCode, upToRoot) {
  if (!upToRoot || upToRoot === undefined) {upToRoot = false;}
  fn_SetBackgroundColorOfCellsInRow(gridCtrl, row_id, startCell, endCell, colorCode);
  // include one parent level
  var parent_row_id = gridCtrl.getParentId(row_id);
  if (parent_row_id) {fn_SetBackgroundColorOfCellsInRow(gridCtrl, parent_row_id, startCell, endCell, colorCode);}

  if (!upToRoot) {return;}
  parent_row_id = gridCtrl.getParentId(parent_row_id);
  while (parent_row_id)
  {
    if (parent_row_id.indexOf("ROOT") < 0)
      {fn_SetBackgroundColorOfCellsInRow(gridCtrl, parent_row_id, startCell, endCell, colorCode);}
    parent_row_id = gridCtrl.getParentId(parent_row_id);
  }
  return;
};

//------------
fn_getClosedIconFromHeadItem = function (headItem)
{
    var defaultNodeIcon = "../images/Icons/16x16/16x16_files.gif"; // default
    if (headItem === undefined || headItem.isError()){return defaultNodeIcon;}
    var nodeIcon = headItem.getProperty("document_hierarchy_icon","");
    if (nodeIcon !== "") {return nodeIcon;}
    return defaultNodeIcon;
};

//------------
fn_getOpenedIconFromHeadItem = function (headItem)
{
    var defaultNodeIcon = "../images/Icons/16x16/16x16_fileCopy.gif"; // default
    if (headItem === undefined || headItem.isError()){return defaultNodeIcon;}
    var nodeIcon = headItem.getProperty("document_hierarchy_icon_open","");
    if (nodeIcon !== "") {return nodeIcon;}
    return defaultNodeIcon;
};

// ============================= Click  Handlers ===============================
//-------------
fn_enableToolbarControls = function (isOn, msg) {
  if (!msg && msg === undefined) {msg = top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.loading_please_wait");}
  if (isOn) {
      if (statusMsgId !== ""){
        if (fn_clearStatusMessage(statusMsgId)){statusMsgId="";} //reset
      }
  }
  else  {
  //debugger;
     if (statusMsgId === ""){statusMsgId = fn_showStatusMessage(0, msg, true);}
  } 
  fn_enableToolbarElement(toolbar1_Control, "expandall", isOn, false);
  fn_enableToolbarElement(toolbar1_Control, "collapseall", isOn, false);
  fn_enableToolbarElement(toolbar1_Control, "refresh", isOn, false);
  fn_enableToolbarElement(toolbar1_Control, "open_row_item", isOn, false);
  if (isEnableEffectivityOption) {fn_enableToolbarElement(toolbar1_Control,"effectivity_option", isOn, true);}
  else {fn_enableToolbarElement(toolbar1_Control,"effectivity_option", false, true);}

  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbar1_Control.showLabels(val);
};


toolbar1_onToolbarClick = function (item) {
	treeGrid1_Control.turnEditOff();
	if (item.getId() == "expandall") {treeGrid1_onExpandAll();}
	if (item.getId() == "collapseall") {treeGrid1_onCollapseAll();}
	if (item.getId() == "refresh") {treeGrid1_onRefresh();}
    if (item.getId() == "open_row_item") {treeGrid1_onOpenRowItem();}
    //if (item.getId() == "effectivity_option") {treeGrid1_oneffectivityOption(item);}
};

toolbar1_onToolbarOnChange = function (item) {
  if (effectivityOption !== "" && item.getId() == "effectivity_option") 
  {
    effectivityOption = item.GetSelectedItem();
    window.RefreshGrid(false);
  }
  return;
};

treeGrid1_onRefresh = function () {
  fn_enableToolbarControls(false,top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.re_loading_please_wait"));
  fn_RefreshGrid(true);
  return;
};

treeGrid1_onGridMenuInit = function (row,col,p) {
	var mnu = treeGrid1_Control.getMenu();
	mnu.removeAll();


	mnu.add("open_row_item",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.view_item"));
	mnu.AddSeparator();
	mnu.add("view_document_files",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.view_document_files"));
    mnu.AddSeparator();
	mnu.add("refresh_this_row",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.refresh_this_row"));
	
	if (isStartedFromTab)
	{
	 mnu.add("action_release_hierarchy_node",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.release_sections_down"));
	 if (!isTopSectionParentItemLocked)
	 {
	   mnu.add("action_revise_hierarchy_node",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.revise_sections_up"));
	 } 
	 if (isTopSectionParentItemLocked)
	 {
	   mnu.addSeparator(); 
	   mnu.add("lock_row_item",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.lock_row_item"));
	   mnu.add("unlock_row_item",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.unlock_row_item"));

	   mnu.AddSeparator();
//## TODO	   mnu.add("add_new_document","Add new Document to Section");
	   mnu.add("add_existing_document",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.add_existing_document"));
	   mnu.add("add_sub_section",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.add_sub_section"));
	 }
	 mnu.AddSeparator();
	 mnu.add("update_doc_to_latest_released",top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.update_doc_to_latest_released"));
	}
	mnu.show();
};

treeGrid1_onGridMenuClick = function (menuChoice) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  
  if (menuChoice == "refresh_this_row") {treeGrid1_onRefreshThisSection();}
  if (menuChoice == "open_row_item") {treeGrid1_onOpenRowItem();}
  if (menuChoice == "view_document_files") {treeGrid1_onViewDocumentFiles();}
  if (menuChoice == "action_release_hierarchy_node") {treeGrid1_actionReleaseNode();}
  if (menuChoice == "action_revise_hierarchy_node") {treeGrid1_actionReviseNode();}
  if (menuChoice == "lock_row_item") {treeGrid1_onLockRowItem();}
  if (menuChoice == "unlock_row_item") {treeGrid1_onUnLockRowItem();}
  if (menuChoice == "add_new_document") {treeGrid1_onAddDocumentToSectionRow(true);}
  if (menuChoice == "add_existing_document") {treeGrid1_onAddDocumentToSectionRow(false);}
  if (menuChoice == "update_doc_to_latest_released") {treeGrid1_updateToLastetReleasedDocument();}
  if (menuChoice == "add_sub_section") {treeGrid1_onAddSubSection(true);}
};

treeGrid1_onTreeGridOpenNode = function (rowId) {
  var hasSubLevelsLoaded = treeGrid1_Control.getUserData(rowId,"gridData_hasSubLevelsLoaded");
  if (hasSubLevelsLoaded !== "1") {
    fn_reloadNextLevelOfThisRow (rowId,2);
    treeGrid1_Control.setUserData(rowId,"gridData_hasSubLevelsLoaded","1");
  }
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");

};

treeGrid1_onTreeGridCloseNode = function (rowId) {
//debugger;
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

//---------------
fn_checkRowItemIsLocked = function (selectedId, itemType, itemId) {
  // return error msg or "" if lockStatus OK.
  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId);
  // update grid in case lock status got change by someone else
  treeGrid1_Control.setCellValue(selectedId,top.treeGrid1.lockIconColumnNo,fn_GetLockedCellFormatByStatusCode(lockStatus));

  if (lockStatus === 1) {return "";}  
  if (lockStatus === 0) {return "The row' item must be locked for this action !";}
  
  return "The row's item is locked by someone else. You do not have permission for this action !";
};

//---------------
fn_checkCurrentUserIsOwnerOfThisItem = function (itemType, itemId) {
  // returns item error if user is not owner !
  var checkItem = top.aras.newIOMItem(itemType,"get");
  checkItem.setID(itemId);
  return top.aras.evalMethod ("IsUser Member Of ItemOwner",checkItem.dom.xml);
};

//---------------
fn_checkCurrentUserIsCoOwnerOfThisItem = function (itemType, itemId) {
  // returns item error if user is not owner !
  var checkItem = top.aras.newIOMItem(itemType,"get");
  checkItem.setID(itemId);
  return top.aras.evalMethod ("IsUser Member Of ItemManager",checkItem.dom.xml);
};

//--------------
fn_ValidateActionRequest = function (actionId, itemType, rowId, rowItemId) {
  // run various checks specific to action
  //debugger;

  var effectivityMustBeCurrent = false;
  var disallowForRootItems = false;  
  var rowItemMustBeLocked = false;
  var rootItemMustBeUnLocked = false;
  var userMustBeOnwer = false;
  var userMustBeCoOnwerOfRootItem = false;
  var lockStatus,checkItem;
  
  switch (actionId)
  {
    case "unlock":
	  lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, rowItemId);
      if (lockStatus === 0) {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.refresh_row_to_see_current_lock_status");}  
      if (lockStatus > 1) {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.row_item_locked_by_other");}  
      effectivityMustBeCurrent = true;
      if (itemType !== "Document Section" && itemType !== "Document")
       {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_not_allowed_on_rows_of_type_x")+itemType+"' !";}

      break;

    case "lock":
	  lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, rowItemId);
      if (lockStatus > 0) {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.row_item_already_locked_by_you_or_other");}  
	  
      effectivityMustBeCurrent = true;
      if (itemType !== "Document Section" && itemType !== "Document")
       {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_not_allowed_on_rows_of_type_x")+itemType+"' !";}

      break;

	case "releaseSection":
	  userMustBeOnwer = true;
      if (itemType !== "Document Section")
        {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_only_allowed_on_rows_of_type_section");}   

      break;

    case "reviseSection":
	  userMustBeOnwer = true;
	  //userMustBeCoOnwerOfRootItem = true;
	  rootItemMustBeUnLocked = true;
      if (itemType !== "Document Section")
        {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_only_allowed_on_rows_of_type_section");}   

      break;

	case "viewDocFiles":
      if (itemType !== "Document")
       {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_only_allowed_on_rows_of_type_document");}   

      break;

	case "updateToReleasedDocument":
     if (itemType !== "Document")
        {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_only_allowed_on_rows_of_type_document");}   

	  break;

	case "addDocument":
      effectivityMustBeCurrent = true;
	  rowItemMustBeLocked = true;
      if (itemType !== "Document Section")
        {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_not_allowed_on_rows_of_type_x")+itemType+"' !";}

      break;

	case "refreshSection":
	  disallowForRootItems = true;  
      if (itemType !== "Document Section")
        {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_not_allowed_on_rows_of_type_x")+itemType+"' !";}
      break;

	  case "addSubSection":
      effectivityMustBeCurrent = true;
	  rowItemMustBeLocked = true;
      if (itemType !== "Document Section")
        {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_not_allowed_on_rows_of_type_x")+itemType+"' !";}
      break;
  }

  if (disallowForRootItems) {
    // check rowId
    if (!treeGrid1_Control.getParentId(rowId))
      {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_not_allowed_on_root_rows");}
  }

  if (rowItemMustBeLocked) {
    var lckMsg = fn_checkRowItemIsLocked(rowId, itemType, rowItemId);
    if (lckMsg !== "") {return lckMsg;}
  }

  if (rootItemMustBeUnLocked) {
    if (isTopSectionParentItemLocked) {
	  if (rootItemType === "Document Book") {return "Action denied !  Top level 'Book' is still locked.";}
	  else {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_denied_top_section_locked");}
	}
  }
  
  if (userMustBeOnwer) {
  	checkItem = fn_checkCurrentUserIsOwnerOfThisItem(itemType, rowItemId);
    if (checkItem.isError) {return top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.user_is_not_owner") + checkItem.getErrorString());}
  }
  
  if (userMustBeCoOnwerOfRootItem) {
    // is user in owners of Root Item ?
    checkItem = fn_checkCurrentUserIsOwnerOfThisItem(rootItemType, rootItemId);
    if (checkItem.isError) {
      // is user in Co-owners of Root Item ?
  	  checkItem = fn_checkCurrentUserIsCoOwnerOfThisItem(rootItemType, rootItemId);
      if (checkItem.isError) {
	    if (rootItemType === "Document Book") {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.action_denied_must_be_owner_or_co_owner_of_book");}
	    else {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.action_denied_must_be_owner_or_co_owner_of_top_section");}
	    return top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.user_is_not_owner") + checkItem.getErrorString());
	  }
	}
  }
  
  if (effectivityMustBeCurrent) {
    if (fn_getChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_option") !== "current_config")
      {return top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.effectivity_must_be_current_for_action");}
  }
  
  // success
  return "";
};

//-----------------
fn_AddOrUpdateRowItemDataOnThisRow = function(parent_row_id, row_id, itemType, rowItem, isRelship)
{
    var iconOpened, iconClosed;
    var colProps, colDisplayTypes;

    // determine icon to be used for new row
    switch (itemType)
    {
      case "Document":
        iconOpened = fn_GetSmallIconFormatOfItemType(itemType);
		iconClosed = iconOpened;
		colProps = top.treeGrid1.columnPropertiesRelatedDocs;
		colDisplayTypes = top.treeGrid1.columnDisplayTypesRelatedDocs;
        break;
      case "Document Section":
        iconOpened = hierarchyNodeIconOpened;
		iconClosed = hierarchyNodeIconClosed;
		colProps = top.treeGrid1.columnProperties;
		colDisplayTypes = top.treeGrid1.columnDisplayTypes;
        break;
      default:
        iconOpened = "";
		iconClosed = iconOpened;
		colProps = "item.item_number,rel.sort_order,item.locked_by_id,<empty>,item.state,item.major_rev,item.generation,<empty>,<empty>";
		colDisplayTypes = "tree:as_link,text,lock,text,text,text,text,text,text";
    }
    // use resolved rowIcon
      
    if (parent_row_id && parent_row_id !== undefined && parent_row_id !== "" && !treeGrid1_Control.isItemExists(row_id)) {
        // add new child row to grid
        fn_MultiLevelItems_AddRowWithIconToGrid (treeGrid1_Control, parent_row_id ,row_id,
               colProps,colDisplayTypes,iconClosed,iconOpened,rowItem,isRelship);
    }
    else {
        // update the existing row
        fn_MultiLevelItems_UpdateRowWithIconOnGrid (treeGrid1_Control, row_id,
               colProps,colDisplayTypes,iconClosed,iconOpened,rowItem,isRelship);

    }      
    
  var itemId = "";
  if (isRelship) {itemId=rowItem.getProperty("related_id");}
  else  {itemId=rowItem.getID();}
  
  treeGrid1_Control.setUserData(row_id,"gridData_rowItemID",itemId );
  treeGrid1_Control.setUserData(row_id,"gridData_rowItemType",itemType );

  return;
};

//-------------
fn_AddNewSubSectionToSection = function (sectionRowId, sectionItemId, shortName, subSectionName, ownedById, description) {
  // Create new SubFolder Rel and new Folder Item
  docHierarchyRel = top.aras.newIOMItem("Document Hierarchy","add");
  docHierarchyRel.setAttribute("select", top.treeGrid1.relSelectProperties);
  docHierarchyRel.setAttribute("doGetItem", "1");
  docHierarchyRel.setProperty("source_id", sectionItemId);
  var subSectionItem = top.aras.newIOMItem("Document Section","add");
  subSectionItem.setAttribute("select", top.treeGrid1.itemSelectProperties);
  subSectionItem.setAttribute("doGetItem", "1");
  subSectionItem.setProperty("short_name",shortName);
  subSectionItem.setProperty("name",subSectionName);
  subSectionItem.setProperty("owned_by_id",ownedById);
  if (description && description !== undefined && description !== "") {subSectionItem.setProperty("description",description);}
  docHierarchyRel.setRelatedItem(subSectionItem);
 
  docHierarchyRel = docHierarchyRel.apply(); //add new relationship on server
  if (docHierarchyRel.isError()) {return docHierarchyRel;}

  newNodeId = sectionItemId + "-" + subSectionItem.getID();

  fn_AddOrUpdateRowItemDataOnThisRow(sectionRowId, newNodeId, subSectionItem.getType(), docHierarchyRel, true);

  treeGrid1_Control.OpenItem(sectionRowId);  
  treeGrid1_Control.ShowRow(newNodeId);
  
  return docHierarchyRel;
};

//-------------
fn_AddNewDocumentToSection = function (sectionRowId, sectionItemId, newDocItem, isNew) {
var sectionItemRel;
var itemsGroupRowId;
var newNodeId;

  if (isNew)
  {
    //## TODO .. mode isNew does not work - Action is hidden from menu for now.
    
    //relationship needs to be created client side !!! -- see how standard relationships logic handles this !!!
    sectionItemRel = top.aras.newItem("Document Section Document","add");
    var aml = "<Item type='Document Section Document' id='"+sectionItemRel.getAttribute("id")+"' action='add' isTemp='1' >";
    aml += "<source_id>"+sectionItemId+"</source_id>";
    aml += "<related_id>"+newDocItem.xml+"</related_id>";
    aml += "</Item>";
    sectionItemRel.loadXml(aml);
    
    top.aras.itemsCache.addItem(sectionItemRel);
  }
  else
  {
    sectionItemRel = top.aras.newIOMItem("Document Section Document","add");
    sectionItemRel.setAttribute("select","id,"+top.treeGrid1.relSelectProperties);
    sectionItemRel.setAttribute("doGetItem","1");
    sectionItemRel.setProperty("source_id", sectionItemId);
   
    var docItem = top.aras.newIOMItem("Document");
    docItem.loadAML(newDocItem.xml);
    sectionItemRel.setRelatedItem(docItem);
    sectionItemRel = sectionItemRel.apply(); //add new relationship on server
    if (sectionItemRel.isError()) {return sectionItemRel;}

    docItem.setAction("get");
    docItem.setAttribute("select","id,config_id,"+top.treeGrid1.itemSelectPropertiesRelatedDocs);
    docItem = docItem.apply();
    sectionItemRel.setRelatedItem(docItem);
  }

  newNodeId = sectionItemId + "-" + docItem.getID();
  fn_AddOrUpdateRowItemDataOnThisRow(sectionRowId, newNodeId, docItem.getType(), sectionItemRel, true);

  treeGrid1_Control.OpenItem(sectionRowId);  
  treeGrid1_Control.ShowRow(newNodeId);

  return sectionItemRel;
};

fn_reloadNextLevelOfThisRow = function (rowId, nextLevels) {
  if (!rowId) {return;}
  var rowType = treeGrid1_Control.getUserData(rowId,"gridData_rowItemType");
  if (!rowType || rowType === undefined){ rowType="";}
  
  // reload the next 2 levels of this Item Foler  
  if (rowType === "Document Section")
  {
    fn_enableToolbarControls(false,top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.loading_next_level_please_wait"));
    
    var rowItemId = treeGrid1_Control.getUserData(rowId,"gridData_rowItemID");

	fn_AddSubSectionsToThisSection (rowItemId, rowId, hierarchyNodeIconClosed, hierarchyNodeIconOpened, false, (effectivityOption == "latest_released"));

    fn_enableToolbarControls(true);

	}
};

treeGrid1_onCollapseAll = function () {
  treeGrid1_Control.CollapseAll();
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

treeGrid1_onExpandAll = function () {
  fn_enableToolbarControls(false,top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.expanding_all_please_wait"));

//debugger;
  // get confirmation to load from sercver
  // else current structure already loaded will be expanded
  //if(confirm(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.confirm_expanding_all_large_struture")))
  //{
  
    fn_clearResultsOnStatusBar();
    var rootRowIds = "#" ;
    id_array = treeGrid1_Control.GetVisibleItemIDs("|").split("|");
    for (var x = 0 ; x < id_array.length ; x++) {
        if (!treeGrid1_Control.GetParentId(id_array[x]))
        {
          rootRowIds += "," + id_array[x];
        }
    }
    rootRowIds = rootRowIds.replace(/\#,/,"");
    if (rootRowIds.indexOf(",") < 0) //single root
    {
      rootRowIds = treeGrid1_Control.GetChildItemsId(rootRowIds,false,",");
    }
    id_array = rootRowIds.split(",");
    for (x = 0 ; x < id_array.length ; x++) {
      fn_reloadNextLevelOfThisRow (id_array[x],-1);  // -1 will load all levels down
    }
  //}
  treeGrid1_Control.ExpandAll();
  
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
  fn_clearStatusMessage(statusMsgId);

  fn_enableToolbarControls(true);

};

treeGrid1_onCollapseAll = function () {
  treeGrid1_Control.CollapseAll();
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

treeGrid1_onGridDoubleClick = function (r) {
  treeGrid1_onOpenRowItem(true);
};

treeGrid1_onGridClick = function (row,c) {
  //evaluate link string to define action
  if (top.treeGrid1.clickedGridLinkValue && top.treeGrid1.clickedGridLinkValue !== "")
  {
    //debugger;
    // is clicked on files icon image
    if (top.treeGrid1.clickedGridLinkValue.indexOf("has_files.gif") >=0)
    {
      treeGrid1_onViewDocumentFiles();
      top.treeGrid1.clickedGridLinkValue = "";
      return;
    }
    // other images - not supported
    if (top.treeGrid1.clickedGridLinkValue.indexOf("<img") >=0)
    {
      top.treeGrid1.clickedGridLinkValue = "";
      return;
    }

    // else just try to open the row's item
    treeGrid1_onOpenRowItem();
    
    top.treeGrid1.clickedGridLinkValue = "";
  }
  return;
};

treeGrid1_onOpenRowItem = function (openFromDoubleClick) {
  if (!openFromDoubleClick || openFromDoubleClick === undefined) {openFromDoubleClick = false;}

  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  if (itemType === top.treeGrid1.gridStructureItemType && fixEffectivityToReleased)
  {
    if (openFromDoubleClick) {return;} // do nothing
    top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.action_denied_on_row_type_when_eff_latest_released"));
    return;
  }
  top.aras.uiShowItem(itemType, itemId);
};

treeGrid1_onGridLinkClick = function (strLink) {
  //assumes only 1 link per row that links to the row's data item
  top.treeGrid1.clickedGridLinkValue = strLink; 
};

treeGrid1_onViewDocumentFiles = function () {
  //debugger;
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("viewDocFiles", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var argsItem = innovator.newItem(itemType,"get");
  argsItem.setID(itemId);

  var result = top.aras.evalMethod ("DocuHierarchy ViewDocumentFiles",argsItem.dom.xml);
  if (result.isError ()) {top.aras.AlertError (top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_viewing_doc_files") + result);} 
  return;
};

treeGrid1_actionReleaseNode = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("releaseSection", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  if(confirm(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.confirm_contiune_releasing_section")))
  {
    var argsItem = innovator.getItemById(itemType,itemId);
    top.aras.evalMethod ("DocuHierarchy StructReleas DownA",argsItem.dom.xml);
  }
  return;
};

treeGrid1_actionReviseNode = function () {
  //debugger;
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("reviseSection", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  if(confirm(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.confirm_contiune_revising_section")))
  {
    var argsItem = innovator.getItemById(itemType,itemId);
    top.aras.evalMethod ("DocuHierarchy StructRevise UpA",argsItem.dom.xml);
  }
  return;
};

treeGrid1_onLockRowItem = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("lock", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId);
  
  // lock the item an report error, if failed
  var res = fn_LockThisItem(itemType, itemId);
  if (res.isError()) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_locking_item") + res.getErrorString());return;}

  // update lock cell of row 
  treeGrid1_Control.setCellValue(selectedId,top.treeGrid1.lockIconColumnNo,fn_GetLockedCellFormatByStatusCode(1));
  return;
};

treeGrid1_onUnLockRowItem = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}

  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("unlock", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  // unlock the rowItem
  var res = fn_UnLockThisItem(itemType, itemId);
  if (res.isError()) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_unlocking_item") + res.getErrorString());return;}
  
  // update lock cell of row 
  treeGrid1_Control.setCellValue(selectedId,top.treeGrid1.lockIconColumnNo,"");
  return;
};

//---------------
treeGrid1_onRefreshThisSection = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");

  var checkMsg = fn_ValidateActionRequest("refreshSection", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  // delete all Children down from this node (selectedId)
  var allChildIds = treeGrid1_Control.getChildItemsId(selectedId,true,"|").split("|");
  for (var i=0;i<allChildIds.length;i++) {treeGrid1_Control.deleteRow(allChildIds[i]);}

  //reload this Section item and update grid row
  var sectionItem = top.aras.newIOMItem("","");
  var aml = "<Item type='Document Hierarchy' action='get' select='"+top.treeGrid1.relSelectProperties+",related_id("+top.treeGrid1.itemSelectProperties+")' >";
  aml += "<related_id><Item type='Document Section' action='get' id='"+itemId+"' ></Item></related_id>";
  aml += "</Item>";
  sectionItem.loadAML(aml);
  sectionItem = sectionItem.apply();
  fn_AddOrUpdateRowItemDataOnThisRow ("", selectedId, itemType, sectionItem, true);
  
  // add this Section's Documents again
  fn_addDocumentSectionRelatedDocsToRow (treeGrid1_Control, selectedId, itemId);
 
  //relaod next levels of this row into grid
  fn_reloadNextLevelOfThisRow(selectedId,2);
  treeGrid1_Control.setUserData(selectedId,"gridData_hasSubLevelsLoaded","1");
  
  treeGrid1_Control.OpenItem(selectedId);
  //treeGrid1_Control.CloseItem(selectedId);
};

treeGrid1_onAddDocumentToSectionRow = function (isNew) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");

  var checkMsg = fn_ValidateActionRequest("addDocument", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var docItem;
  if (isNew) {
    //## TODO rework to include temporary "Document Section Document" relationship, as well
    // Create temporary Item
    docItem = top.aras.newItem("Document", "add");
    if(!docItem)	{return;} // canceled
    
    top.aras.uiShowItemEx(docItem);
    top.aras.itemsCache.addItem(docItem);

  }
  else {
    var searchItemTypeName = "Document";
    var param = { aras: top.aras, itemtypeName: searchItemTypeName, multiselect: false };

    var dlgRes = showModalDialog('searchDialog.html', param, 'dialogHeight:450px; dialogWidth:700px; status:0; help:0; resizable:1');
	
    if(!dlgRes) {return;}

    docItem = dlgRes.item; 
    if(!docItem)	{return;} // no item selected
  }
  docItem = fn_AddNewDocumentToSection(selectedId,itemId,docItem,isNew);
  if (docItem.isError()) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_adding_doc_to_section") + docItem.getErrorString()); return;} 
 
//  treeGrid1_Control.UpdateItem(selectedId);  
 
  return;
};

treeGrid1_updateToLastetReleasedDocument = function () {
  //debugger;
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("updateToReleasedDocument", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var parentId = treeGrid1_Control.GetParentId(selectedId);
  if (parentId)
  {
    var parentItemId = treeGrid1_Control.getUserData(parentId,"gridData_rowItemID");
    var parentItemType = treeGrid1_Control.getUserData(parentId,"gridData_rowItemType");

    // fetch details of relationship to Document
    var qry = "<Item type='Document Section Document' action='get' ";
    qry += "select='related_id(id,generation,state,is_released,item_number,owned_by_id),source_id(id,generation,state,is_released,owned_by_id)' >";
    qry += "<source_id>"+ parentItemId +"</source_id>";
    qry += "<related_id>" + itemId + "</related_id></Item>";

    var relItem = top.aras.newIOMItem("","");
    relItem.loadAML(qry);
    relItem = relItem.apply();
    if (relItem.isError) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_getting_doc_rels_of_section") + relItem.getErrorString());return;}

    // check if parent item is released
    var checkItem = relItem.getPropertyItem("source_id");
    if (checkItem.getProperty("state","") !== "Released" && checkItem.getProperty("is_released","0") !== "1")
    {
      top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.parent_must_be_released_for_action"));
      return;
    }

	checkItem = fn_checkCurrentUserIsOwnerOfThisItem(parentItemType,parentItemId);
    if (checkItem.isError) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.user_is_not_owner") + checkItem.getErrorString());return;}
	  
    // check if latest released document is new than this generation of the document
    checkItem = relItem.getPropertyItem("related_id");
    var currentDocGen = checkItem.getProperty("generation","");
    var currentDocNum = checkItem.getProperty("item_number","");
    checkItem = checkItem.apply("Get Latest Released Item By Num");
    if (checkItem.isError) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_getting_latest_released_item_by_item_number") + checkItem.getErrorString());return;}
    
    var latestReleasedDocGen = checkItem.getProperty("generation","");
    if (latestReleasedDocGen <= currentDocGen)
    {
      top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.document_has_no_released_rev_newer_than_current_version"));
      return;
    }

    // force an update of the related id of the relationship
    relItem.setAttribute("newRelatedId",checkItem.getID());
    checkItem = relItem.apply("Update RelShip related_id");  // server method from Common Utilties
    if (checkItem.isError) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_updating_new_related_id_on_rel") + checkItem.getErrorString());return;}
    
    alert ("Update has finished. Please refresh the grid to see the result.");
    return;
  }
  
};

treeGrid1_onAddSubSection = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("addSubSection", itemType, selectedId, itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  // dialog with sub Section form
  var formNd = top.aras.getItemByName("Form", "Document Section AddNewSub", 0);
  var res;
  if (formNd)
  {
    var param = new Object();
    param.title = "Add New Sub Section";
    param.formId = formNd.getAttribute("id");
    param.aras = top.aras;
    param.itemTypeName = itemType;

    var width = top.aras.getItemProperty(formNd, "width");
    var height = top.aras.getItemProperty(formNd, "height");

    res = showModalDialog("ShowFormAsADialog.html", param,"dialogHeight:"+height+"px; dialogWidth:"+width+"px; " +  "status:0; help:0; resizable:1; scroll:0;");

  if (res) {
    var subSectionItem = fn_AddNewSubSectionToSection(selectedId,itemId,res.short_name,res.name,res.owned_by_id,res.description);
    if (subSectionItem.isError()) {top.aras.AlertError(top.aras.getResource("DocumentHierarchies", "dochierarchygrid.message.error_adding_sub_section")+ subSectionItem.getErrorString()); return;} 
  } 
  }
  return;

};

// Add drag and drop logic here, if needed 
treeGrid1_onTreeGridDragStart = function (a,b) {
  return;
};
treeGrid1_onTreeGridDragEnter = function (a,b) {
  return;
};
treeGrid1_onTreeGridDragDrop = function (a,b) {
  return;
};
    
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Document Hierarchy Grid Handler</name>
 </Item>
</AML>